Input Reading / Initial Logic (Blue)
1 - Push 0 onto stack
2 - The start of the programs main while loop
    - First reads in a character (from now on reffered to as 'token'), if nothing was input break out of loop and go to (green 1)
    - 2a - Ensures CC is set to left
3 - Push 48 (0) to stack to check if 'token' is a digit or operator
4 - If 'token' is an operator (or parenthesis) go to (red)
5 - Else input char is a digit, so output the number and loop back to (blue 2)

Parenthesis Check (Red)
1 - Push 40 ('(') onto the stack, if 'token' is left paren go to 1a (red)
    - 1a - Push left paren onto operator stack (which I define as below the 0 on stack) and continue to (blue 2)
2 - Push 41 (')') onto the stack, if 'token' is right paren go to 3 (red)
    - If token is not right paren, then 'token' is an operator, go to 4 (red)
3 - Pop value 'operator' from operator stack, if 'operator' is not left paren, output 'operator' and loop back to 3 by following 3a,b
    - If 'operator' is a left paren, break out of the 3 loop and go back to (blue 2)
4 - Line break to go to (purple)

Operator Stack Check (Purple)
1 - Roll stack to get the top element 'op1' from the operator stack (that we've maintained by keeping it under the initial pushed 0)
    - 1a - Ensures CC is set to left
2 - Check if operator stack is empty, if empty go to 2a (purple)
    - 2a - Push 'token' to the operator stack and continue back to (blue 2)
3 - Push 40 ('(') onto the stack, if 'op1' is left paren go to 3a (purple)
    - 3a - Push 'token' to the operator stack and continue back to (blue 2)

Operator Logic (Orange)
1 - Roll stack to place 'token' on the top
2 - Push 42 ('*') onto the stack, if 'token' is *, go to (orange 4)
3 - Else Push 47 ('/') onto the stack, if 'token' is /, go to (orange 4)
    - Else 'token' precedence is <= to that of 'op1' thus go to (orange 7)
4 - Roll stack to place 'op1' on the top
5 - Push 43 ('+') onto the stack, if 'op1' is +, go to (orange 5a)
    - Else, 'op1' is not +, go to (orange 6)
    - 5a - Roll stack to place 'token' on the top, then Push 'token' to the operator stack and continue back to (blue 2)
6 - Push 45 ('-') onto the stack, if 'op1' is -, go to (orange 6a)
    - 6a - Continue to (orange 5a)
7 - Roll stack to place 'op1' on the top, go to (orange 8)
8 - Output operator, continue to (purple 1a)

Post Input Processing (Green)
1- 